/*! 
 \defgroup libmorpho libmorpho
 */
 
/*!
  \mainpage libmorpho Documentation
  <hr> 
  
  libmorpho is a free software library written in ANSI C that implements several 
  basic operations of mathematical morphology: erosions, dilations, openings, and closings
  by lines, rectangles, or arbitrary shaped structuring elements or by structuring functions.  
  The software is released under the GNU General Public license. 

  This manual is divided into the following sections:
- \subpage usePage 
- \subpage installPage 
- \subpage illustrationPage
- \subpage detailsPage
- \subpage licensePage
- \subpage performancesPage

  \section authorsSec Authors
  - <a href="http://www.ulg.ac.be/telecom/people/RenaudDardenne.html">Renaud Dardenne</a>
  - <a href="http://www.ulg.ac.be/telecom/people/MarcVanDroogenbroeck.html">Marc Van Droogenbroeck</a> 
 */
 
/*! 
  \page usePage How to use this library?

  You should first install the library (see \ref installPage). 
  After installation, you can take a look at the examples in the 'examples' directory. 
  The corresponding executable programs are to be found in the 'bin' directory. <br>
  Assume for example that you have generated the examples with 

\code make examples\endcode
  You can run a test program with:
\code bin/morpho img/pinguin.pgm test.pgm 1 2 9\endcode

This will write an image called test.pgm that results from a two-dimensional erosion of image pinguin.pgm with a 9 by 9 squared structuring element. 
  
  \section inclusionLib Write your own programs and call the library

  Once you have installed the library, you only need to include the header file libmorpho.h in your program and link it with the library. Make sure the linker finds both the header file and the library (use the -L and -I switches to explicitely specify their locations if the linker can't find them).

  You can find profiled output of the performance in \ref performancesPage.
 */

/*! 
  \page installPage Installation
  Installing the library is quite straightforward (hopefully!):
  - make (compiles the source into objects)
  - make lib (if you want to generate the library)
  - make install (to install the library; you need to be "root" or to have appropriate access rights)
  - make examples (if you want to play with a few examples)
 */

/*! 
  \page illustrationPage Illustrations

  \section sectionHor One-dimensional horizontal operators

  <table align="center" border=0>
    <tr>
      <td><IMG src="pinguin.jpg" border="0"></td>
      <td></td>
    </tr>
    <tr>
      <td>Original image</td>
      <td></td>
    </tr>
    <tr>
      <td><IMG src="erosionByAnchor_1D_horizontal.jpg" border="0"></td>
      <td><IMG src="dilationByAnchor_1D_horizontal.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref erosionByAnchor_1D_horizontal</td>
      <td>\ref dilationByAnchor_1D_horizontal</td>
    </tr>
    <tr>
      <td><IMG src="openingByAnchor_1D_horizontal.jpg" border="0"></td>
      <td><IMG src="closingByAnchor_1D_horizontal.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref openingByAnchor_1D_horizontal</td>
      <td>\ref closingByAnchor_1D_horizontal</td>
    </tr>
</table>

  \section sectionVer One-dimensional vertical operators

  <table align="center" border=0>
    <tr>
      <td><IMG src="pinguin.jpg" border="0"></td>
      <td></td>
    </tr>
    <tr>
      <td>Original image</td>
      <td></td>
    </tr>
    <tr>
      <td><IMG src="erosionByAnchor_1D_vertical.jpg" border="0"></td>
      <td><IMG src="dilationByAnchor_1D_vertical.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref erosionByAnchor_1D_vertical</td>
      <td>\ref dilationByAnchor_1D_vertical</td>
    </tr>
    <tr>
      <td><IMG src="openingByAnchor_1D_vertical.jpg" border="0"></td>
      <td><IMG src="closingByAnchor_1D_vertical.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref openingByAnchor_1D_vertical</td>
      <td>\ref closingByAnchor_1D_vertical</td>
    </tr>
</table>

  \section twoSection Two-dimensional operators with a square

  <table align="center" border=0>
    <tr>
      <td><IMG src="pinguin.jpg" border="0"></td>
      <td></td>
    </tr>
    <tr>
      <td>Original image</td>
      <td></td>
    </tr>
    <tr>
      <td><IMG src="erosionByAnchor_2D.jpg" border="0"></td>
      <td><IMG src="dilationByAnchor_2D.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref erosionByAnchor_2D</td>
      <td>\ref dilationByAnchor_2D</td>
    </tr>
    <tr>
      <td><IMG src="openingByAnchor_2D.jpg" border="0"></td>
      <td><IMG src="closingByAnchor_2D.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref openingByAnchor_2D</td>
      <td>\ref closingByAnchor_2D</td>
    </tr>
</table>

  \section twodSectionArb Two-dimensional operators with an arbitrary shaped structuring element

  <table align="center" border=0>
    <tr>
      <td><IMG src="pinguin.jpg" border="0"></td>
      <td><IMG src="U.jpg" border="0"></td>
    </tr>
    <tr>
      <td>Original image</td>
      <td>U shape (scaled to 200%)</td>
    </tr>
    <tr>
      <td><IMG src="erosion_arbitrary_SE.jpg" border="0"></td>
      <td><IMG src="dilation_arbitrary_SE.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref erosion_arbitrary_SE</td>
      <td>\ref dilation_arbitrary_SE</td>
    </tr>
    <tr>
      <td><IMG src="opening_arbitrary_SE.jpg" border="0"></td>
      <td><IMG src="closing_arbitrary_SE.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref opening_arbitrary_SE</td>
      <td>\ref closing_arbitrary_SE</td>
    </tr>
</table>


  \section twodSectionArbFunc Two-dimensional operators with an arbitrary shaped structuring function

  <table align="center" border=0>
    <tr>
      <td><IMG src="pinguin.jpg" border="0"></td>
      <td><IMG src="ball.jpg" border="0"></td>
    </tr>
    <tr>
      <td>Original image</td>
      <td>Ball (original size)</td>
    </tr>
    <tr>
      <td><IMG src="erosion_arbitrary_SF.jpg" border="0"></td>
      <td><IMG src="dilation_arbitrary_SF.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref erosion_arbitrary_SF</td>
      <td>\ref dilation_arbitrary_SF</td>
    </tr>
    <tr>
      <td><IMG src="opening_arbitrary_SF.jpg" border="0"></td>
      <td><IMG src="closing_arbitrary_SF.jpg" border="0"></td>
    </tr>
    <tr>
      <td>\ref opening_arbitrary_SF</td>
      <td>\ref closing_arbitrary_SF</td>
    </tr>
</table>

*/
/*! 
  \page detailsPage Technical details

 \section sectionWhat What is implemented?

  libmorpho provides algorithms for morphological erosions, dilations, openings, and closings. All the implementations are based on ideas presented in the following two papers: 

- M. Van Droogenbroeck and M. Buckley. <b>Morphological erosions and openings: 
fast algorithms based on anchors</b>. <em>Journal of Mathematical Imaging and Vision</em>, Special Issue on Mathematical Morphology after 40 Years, 22(2-3):121-142, May 2005.
- M. Van Droogenbroeck and H. Talbot. <b>Fast Computation of morphological operations with arbitrary structuring elements</b>. <em>Pattern Recognition Letters</em>, 17(14):1451-1460, 1996.

The first paper presents an algorithm for linear structuring elements. 
From our experience, for sizes larger than 3-4 pixels, these algorithms are faster than van Herk's algorithms. 
The second paper describes an algorithm applicable to arbitrary shaped structuring elements. In addition, you can use a structuring function instead of a structuring element (sometimes called <em>flat</em> structuring element). 

 \section sectionPerf A few words of theory

According to Steiner, a square S can be decomposed as the dilation of an horizontal segment H by a vertical segment:

\code S = H + V\endcode

The chain rule helps us then to reduce the computation time as it states that 
the erosion of an image f by a square S is equivalent to two successive erosions. More precisely,

\code f - S = f - (H + V) = (f - H) - V\endcode

The same applies to dilations and therefore an opening by a square can be computed as 4 successive erosions or dilations:

\code f o S = f o (H + V) = [([f - H] -V) + H] + V\endcode

This expression is the key property for most implementations. However one of the abovementioned paper 
and other papers have proposed algorithms that implements openings directly. 
To our knowledge all these implementations applies only to operations with one-dimensional structuring elements. 
The following figure compares the computation times of several known algorithms:

<center>
<img src="graph.jpg"><br><b>Computation times with a linear structuring element</b>
</center>

<p>

On this graph one can see that the computation time of an opening is slightly lower than the computation time of an erosion. 
We can take profit of this observation and, if one remember that the dilation is commutative, implement openings by squares as 

\code f o S = f o (H + V) = [([f - H] -V) + V] + H = ([f - H] o V) + H\endcode

Two-dimensional openings and closings provided in this library have been implemented in this way. 

Please remember that (foH)oV is not equal to (foS). In fact (foH)oV is not even an opening, but the 
supremum of (foH) and (foV) is an opening. 


\subsection sizeTest Discussions on the size of the structuring element

Theory tells us that erosion and dilation depends on the location of the origin, but not openings and closings. This has a practical consequence. Let us take a simple structuring element like a 2x2 square. 
Where should one locate the origin? Obviously all the corners are valid candidates. 
With a 3x3 square you won't have to handle this king of issue. The usual workaround is to force 
structuring elements to have odd dimensions. We proceeded likewise for erosions and 
dilations in libmorpho. <br>

But there is no reason to impose this workaround for openings and closings as long as we do not 
compute openings and closings directly (not as the cascade of an erosion followed by a dilation 
or vice versa). In libmorpho, horizontal and vertical one-dimensional openings and closings 
(\ref openingByAnchor_1D_horizontal,  
\ref openingByAnchor_1D_vertical, 
\ref closingByAnchor_1D_horizontal, and 
\ref closingByAnchor_1D_vertical) 
are not limited 
to structuring elements with odd sizes; this particularity is not usual with other libraries 
dedicated to mathematical morphology. 


\subsection subArbitrary Arbitrary shaped structuring elements and functions

Morphology with arbitrary shaped structuring elements proved hard to be implemented. 
The main reason is that with most shapes there is no possible simplification like the chain rule. 
Our implementation uses a sliding histogram that is moved step by step around the original image. 
As we allow an arbitrary shaped structuring element we can use lines or rectangles with even sizes, 
even for the case of erosions and dilations. In \ref erosion_arbitrary_SE you can see that the 
structuring element is provided as an image. To describe the structuring element we use the 
following convention to fill that image:

- 0 means that this pixel does not belong to the structuring element
- 1 means that this pixel belongs to the structuring element

When the image value is larger than 1, for example 5, then it is assumed that you have defined a 
structuring function and that 4 (=5-1) is the value of the structuring function. 
Also you have to provide the location the origin. 
In our implementations the structuring element must contain the origin 
(i.e. its value in the image should be larger or equal to 1). 


\subsection sectionBorder Border effects

 When the origin of the structuring element coincides with a pixel close to the border, part 
 of the structuring element covers areas located outside the image. This 
 problem is generally referred to as <em>border effects</em>. 
 
 We discussed border effects in depth under the framework of <em>domain-invariance</em> in one 
 of the abovementioned papers. 
 The general conclusion is that border effects for an opening differ 
 when the opening is computed as the cascade of an erosion and a dilation or when the opening is 
 computed directly. 
 For this reason you may find out that 
\code f o S = ([f - H] o V) + H\endcode
does not provide the same results as
\code f o S = [([f - H] -V) + H] + V\endcode
on the top and bottom areas of the image.
This is not a bug of our implementation (but there might be other bugs...).


\subsection sectionBuffer Memory accesses in C

 As for any algorithms written in C we had to deal with the issue of memory access. 
 Two-dimensional buffers are stored as vectors. It proves to be faster to access a neighbouring pixel than a pixel located a raw below. 
 This is why the implementation with an horizontal line is faster than with a vertical line (see \ref erosionTimes). 
 Although libmorpho implements vertical operations directly you may be tempted to compute a 
 vertical operations as a horizontal operations after and before transposing the image. From 
 our experience this is slower than the direct implementations with a vertical segment but 
 you can make your own mind by trying it with or whithout the \ref imageTranspose function provided 
 in this package. 

 A ranking of different operators is provided in section \ref rankingTimes. 
 */


/*!
  \page  performancesPage Performances output by GPROF

<hr>

All performances provided in this section were measured on an Intel Celeron (Coppermine), 
597.958 MHz processor, with Linux version 2.6.8-2-686 and gcc version 3.3.5. 

\section erosionTimes Computation times for 1000 erosions

<pre>
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 56.11    334.93   334.93     1000   334.93   334.94  erosionByAnchor_1D_vertical
 43.92    597.11   262.18     1000   262.18   262.18  erosionByAnchor_1D_horizontal
  0.00    597.12     0.01     2000     0.01     0.01  is_size_valid_1D
  0.00    597.14     0.01                             main
  0.00    597.14     0.00        2     0.00     0.00  read_header_line
  0.00    597.14     0.00        2     0.00     0.00  skip_comment
  0.00    597.14     0.00        1     0.00     0.00  get_pgm_header
  0.00    597.14     0.00        1     0.00     0.00  match_key
  0.00    597.14     0.00        1     0.00     0.00  open_read
  0.00    597.14     0.00        1     0.00     0.00  open_read_pixmap
  0.00    597.14     0.00        1     0.00     0.00  readPGM
  0.00    597.14     0.00        1     0.00     0.00  writePGM

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.
</pre>

\section openingTimes Computation times for 1000 openings

<pre>
Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls  ms/call  ms/call  name    
 55.19    286.16   286.16     1000   286.16   286.16  openingByAnchor_1D_vertical
 44.84    518.62   232.47     1000   232.47   232.47  openingByAnchor_1D_horizontal
  0.00    518.64     0.01                             main
  0.00    518.64     0.00     2000     0.00     0.00  is_size_valid_1D
  0.00    518.64     0.00        2     0.00     0.00  read_header_line
  0.00    518.64     0.00        2     0.00     0.00  skip_comment
  0.00    518.64     0.00        1     0.00     0.00  get_pgm_header
  0.00    518.64     0.00        1     0.00     0.00  match_key
  0.00    518.64     0.00        1     0.00     0.00  open_read
  0.00    518.64     0.00        1     0.00     0.00  open_read_pixmap
  0.00    518.64     0.00        1     0.00     0.00  readPGM
  0.00    518.64     0.00        1     0.00     0.00  writePGM

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.
 
 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this 
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.
</pre>

\section rankingTimes Relative ranking [Computation times for 1000 operations]

Relative ranking of a few operators, from the fastest to the slowest. 

<pre>
 time   seconds   seconds    calls  ms/call  ms/call  name    
                   232.47     1000   232.47   232.47  openingByAnchor_1D_horizontal
                   262.18     1000   262.18   262.18  erosionByAnchor_1D_horizontal
                   286.16     1000   286.16   286.16  openingByAnchor_1D_vertical
                   334.93     1000   334.93   334.94  erosionByAnchor_1D_vertical
                  5123.12     1000  5123.12  5123.12  erosion_arbitrary_SE
		   
		   
</pre>

*/

/*!
  \page 	licensePage Terms of license

  Contact the authors if you want to discuss licensing issues (cf. \ref authorsSec).<br>

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU  General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.
 
  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.
 
  You should have received a copy of the GNU  General Public
  License along with this library; if not, write to the
  Free Software Foundation, Inc., 59 Temple Place - Suite 330,
  Boston, MA 02111-1307, USA.
 
<br>
<hr>
<br>
<center>
<br>
		    GNU GENERAL PUBLIC LICENSE
		       Version 2, June 1991
<br>
</center>
<br>
 Copyright (C) 1989, 1991 Free Software Foundation, Inc.
                      59 Temple Place, Suite 330, Boston, MA 02111 USA
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

			    Preamble

  The licenses for most software are designed to take away your
freedom to share and change it.  By contrast, the GNU General Public
License is intended to guarantee your freedom to share and change free
software--to make sure the software is free for all its users.  This
General Public License applies to most of the Free Software
Foundation's software and to any other program whose authors commit to
using it.  (Some other Free Software Foundation software is covered by
the GNU Library General Public License instead.)  You can apply it to
your programs, too.

  When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
this service if you wish), that you receive source code or can get it
if you want it, that you can change the software or use pieces of it
in new free programs; and that you know you can do these things.

  To protect your rights, we need to make restrictions that forbid
anyone to deny you these rights or to ask you to surrender the rights.
These restrictions translate to certain responsibilities for you if you
distribute copies of the software, or if you modify it.

  For example, if you distribute copies of such a program, whether
gratis or for a fee, you must give the recipients all the rights that
you have.  You must make sure that they, too, receive or can get the
source code.  And you must show them these terms so they know their
rights.

  We protect your rights with two steps: (1) copyright the software, and
(2) offer you this license which gives you legal permission to copy,
distribute and/or modify the software.

  Also, for each author's protection and ours, we want to make certain
that everyone understands that there is no warranty for this free
software.  If the software is modified by someone else and passed on, we
want its recipients to know that what they have is not the original, so
that any problems introduced by others will not reflect on the original
authors' reputations.

  Finally, any free program is threatened constantly by software
patents.  We wish to avoid the danger that redistributors of a free
program will individually obtain patent licenses, in effect making the
program proprietary.  To prevent this, we have made it clear that any
patent must be licensed for everyone's free use or not licensed at all.

  The precise terms and conditions for copying, distribution and
modification follow.

		    GNU GENERAL PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. This License applies to any program or other work which contains
a notice placed by the copyright holder saying it may be distributed
under the terms of this General Public License.  The "Program", below,
refers to any such program or work, and a "work based on the Program"
means either the Program or any derivative work under copyright law:
that is to say, a work containing the Program or a portion of it,
either verbatim or with modifications and/or translated into another
language.  (Hereinafter, translation is included without limitation in
the term "modification".)  Each licensee is addressed as "you".

Activities other than copying, distribution and modification are not
covered by this License; they are outside its scope.  The act of
running the Program is not restricted, and the output from the Program
is covered only if its contents constitute a work based on the
Program (independent of having been made by running the Program).
Whether that is true depends on what the Program does.

  1. You may copy and distribute verbatim copies of the Program's
source code as you receive it, in any medium, provided that you
conspicuously and appropriately publish on each copy an appropriate
copyright notice and disclaimer of warranty; keep intact all the
notices that refer to this License and to the absence of any warranty;
and give any other recipients of the Program a copy of this License
along with the Program.

You may charge a fee for the physical act of transferring a copy, and
you may at your option offer warranty protection in exchange for a fee.

  2. You may modify your copy or copies of the Program or any portion
of it, thus forming a work based on the Program, and copy and
distribute such modifications or work under the terms of Section 1
above, provided that you also meet all of these conditions:

    a) You must cause the modified files to carry prominent notices
    stating that you changed the files and the date of any change.

    b) You must cause any work that you distribute or publish, that in
    whole or in part contains or is derived from the Program or any
    part thereof, to be licensed as a whole at no charge to all third
    parties under the terms of this License.

    c) If the modified program normally reads commands interactively
    when run, you must cause it, when started running for such
    interactive use in the most ordinary way, to print or display an
    announcement including an appropriate copyright notice and a
    notice that there is no warranty (or else, saying that you provide
    a warranty) and that users may redistribute the program under
    these conditions, and telling the user how to view a copy of this
    License.  (Exception: if the Program itself is interactive but
    does not normally print such an announcement, your work based on
    the Program is not required to print an announcement.)

These requirements apply to the modified work as a whole.  If
identifiable sections of that work are not derived from the Program,
and can be reasonably considered independent and separate works in
themselves, then this License, and its terms, do not apply to those
sections when you distribute them as separate works.  But when you
distribute the same sections as part of a whole which is a work based
on the Program, the distribution of the whole must be on the terms of
this License, whose permissions for other licensees extend to the
entire whole, and thus to each and every part regardless of who wrote it.

Thus, it is not the intent of this section to claim rights or contest
your rights to work written entirely by you; rather, the intent is to
exercise the right to control the distribution of derivative or
collective works based on the Program.

In addition, mere aggregation of another work not based on the Program
with the Program (or with a work based on the Program) on a volume of
a storage or distribution medium does not bring the other work under
the scope of this License.

  3. You may copy and distribute the Program (or a work based on it,
under Section 2) in object code or executable form under the terms of
Sections 1 and 2 above provided that you also do one of the following:

    a) Accompany it with the complete corresponding machine-readable
    source code, which must be distributed under the terms of Sections
    1 and 2 above on a medium customarily used for software interchange; or,

    b) Accompany it with a written offer, valid for at least three
    years, to give any third party, for a charge no more than your
    cost of physically performing source distribution, a complete
    machine-readable copy of the corresponding source code, to be
    distributed under the terms of Sections 1 and 2 above on a medium
    customarily used for software interchange; or,

    c) Accompany it with the information you received as to the offer
    to distribute corresponding source code.  (This alternative is
    allowed only for noncommercial distribution and only if you
    received the program in object code or executable form with such
    an offer, in accord with Subsection b above.)

The source code for a work means the preferred form of the work for
making modifications to it.  For an executable work, complete source
code means all the source code for all modules it contains, plus any
associated interface definition files, plus the scripts used to
control compilation and installation of the executable.  However, as a
special exception, the source code distributed need not include
anything that is normally distributed (in either source or binary
form) with the major components (compiler, kernel, and so on) of the
operating system on which the executable runs, unless that component
itself accompanies the executable.

If distribution of executable or object code is made by offering
access to copy from a designated place, then offering equivalent
access to copy the source code from the same place counts as
distribution of the source code, even though third parties are not
compelled to copy the source along with the object code.

  4. You may not copy, modify, sublicense, or distribute the Program
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense or distribute the Program is
void, and will automatically terminate your rights under this License.
However, parties who have received copies, or rights, from you under
this License will not have their licenses terminated so long as such
parties remain in full compliance.

  5. You are not required to accept this License, since you have not
signed it.  However, nothing else grants you permission to modify or
distribute the Program or its derivative works.  These actions are
prohibited by law if you do not accept this License.  Therefore, by
modifying or distributing the Program (or any work based on the
Program), you indicate your acceptance of this License to do so, and
all its terms and conditions for copying, distributing or modifying
the Program or works based on it.

  6. Each time you redistribute the Program (or any work based on the
Program), the recipient automatically receives a license from the
original licensor to copy, distribute or modify the Program subject to
these terms and conditions.  You may not impose any further
restrictions on the recipients' exercise of the rights granted herein.
You are not responsible for enforcing compliance by third parties to
this License.

  7. If, as a consequence of a court judgment or allegation of patent
infringement or for any other reason (not limited to patent issues),
conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License.  If you cannot
distribute so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not distribute the Program at all.  For example, if a patent
license would not permit royalty-free redistribution of the Program by
all those who receive copies directly or indirectly through you, then
the only way you could satisfy both it and this License would be to
refrain entirely from distribution of the Program.

If any portion of this section is held invalid or unenforceable under
any particular circumstance, the balance of the section is intended to
apply and the section as a whole is intended to apply in other
circumstances.

It is not the purpose of this section to induce you to infringe any
patents or other property right claims or to contest validity of any
such claims; this section has the sole purpose of protecting the
integrity of the free software distribution system, which is
implemented by public license practices.  Many people have made
generous contributions to the wide range of software distributed
through that system in reliance on consistent application of that
system; it is up to the author/donor to decide if he or she is willing
to distribute software through any other system and a licensee cannot
impose that choice.

This section is intended to make thoroughly clear what is believed to
be a consequence of the rest of this License.

  8. If the distribution and/or use of the Program is restricted in
certain countries either by patents or by copyrighted interfaces, the
original copyright holder who places the Program under this License
may add an explicit geographical distribution limitation excluding
those countries, so that distribution is permitted only in or among
countries not thus excluded.  In such case, this License incorporates
the limitation as if written in the body of this License.

  9. The Free Software Foundation may publish revised and/or new versions
of the General Public License from time to time.  Such new versions will
be similar in spirit to the present version, but may differ in detail to
address new problems or concerns.

Each version is given a distinguishing version number.  If the Program
specifies a version number of this License which applies to it and "any
later version", you have the option of following the terms and conditions
either of that version or of any later version published by the Free
Software Foundation.  If the Program does not specify a version number of
this License, you may choose any version ever published by the Free Software
Foundation.

  10. If you wish to incorporate parts of the Program into other free
programs whose distribution conditions are different, write to the author
to ask for permission.  For software which is copyrighted by the Free
Software Foundation, write to the Free Software Foundation; we sometimes
make exceptions for this.  Our decision will be guided by the two goals
of preserving the free status of all derivatives of our free software and
of promoting the sharing and reuse of software generally.

			    NO WARRANTY

  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
REPAIR OR CORRECTION.

  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
POSSIBILITY OF SUCH DAMAGES.

		     END OF TERMS AND CONDITIONS

	Appendix: How to Apply These Terms to Your New Programs

  If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
convey the exclusion of warranty; and each file should have at least
the "copyright" line and a pointer to where the full notice is found.

    <b>LIBMORPHO is a free software library written in ANSI C that implements several 
  basic operations of mathematical morphology: erosions, dilations, openings, and closings
  by lines, rectangles, or arbitrary shaped structuring elements or by structuring functions.  

     Copyright (C)     Renaud Dardenne and Marc Van Droogenbroeck </b>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA


This General Public License does not permit incorporating your program into
proprietary programs.  If your program is a subroutine library, you may
consider it more useful to permit linking proprietary applications with the
library.  If this is what you want to do, use the GNU Library General
Public License instead of this License.

*/

